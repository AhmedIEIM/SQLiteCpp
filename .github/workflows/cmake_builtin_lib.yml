name: CMake builtin sqlite3 (Windows)

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.cfg.name }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { name: "Windows MSVC (VS2022)", gen: "Visual Studio 17 2022", build_type: "Debug",
              use_mingw: "false", extra_flags: "" }
          - { name: "Windows MinGW (Makefiles)", gen: "MinGW Makefiles", build_type: "Debug",
              use_mingw: "true", extra_flags: "-DCMAKE_C_FLAGS=-fno-stack-protector -DCMAKE_CXX_FLAGS=-fno-stack-protector" }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Ensure googletest is present
        shell: pwsh
        run: |
          git submodule sync --recursive
          git -c protocol.version=2 submodule update --init --force --depth 1 --recursive --jobs 8
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            Write-Host "Submodule missing; cloning googletest shallowly..."
            if (Test-Path "$env:GITHUB_WORKSPACE\googletest") {
              Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE\googletest"
            }
            git clone --depth 1 https://github.com/google/googletest.git "$env:GITHUB_WORKSPACE\googletest"
          }
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            Write-Error "googletest is still missing; aborting."
          }

      - name: Setup MSVC env
        if: matrix.cfg.use_mingw == 'false'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install MinGW (Chocolatey)
        if: matrix.cfg.use_mingw == 'true'
        shell: pwsh
        run: choco install -y mingw

      - name: Add MinGW to PATH
        if: matrix.cfg.use_mingw == 'true'
        shell: bash
        run: echo "C:\mingw64\bin" >> "$GITHUB_PATH"

      - name: Configure (use bundled sqlite3)
        shell: bash
        run: |
          mkdir -p build
          cmake -S . -B build -G "${{ matrix.cfg.gen }}" \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} \
            -DSQLITECPP_INTERNAL_SQLITE=ON \
            -DSQLITE_OMIT_LOAD_EXTENSION=ON \
            -DSQLITECPP_BUILD_TESTS=ON \
            -DSQLITECPP_BUILD_EXAMPLES=ON \
            -DSQLITECPP_RUN_CPPCHECK=OFF \
            -DSQLITECPP_RUN_CPPLINT=OFF \
            ${{ matrix.cfg.extra_flags }}

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.cfg.build_type }} -j2

      - name: Test
        shell: bash
        run: ctest --verbose --output-on-failure --test-dir build -C ${{ matrix.cfg.build_type }}
