name: Main Workflow

on:
  push:
    branches: [ main, master, develop, 'releases/**' ]
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write

jobs:
  sonarqube:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}   # cmake/ninja come from /mingw64/bin

    env:
      BUILD_DIR: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false  # we self-heal below

      # Robust: try submodule init/update; if still missing, shallow-clone googletest
      - name: Ensure googletest is present
        shell: pwsh
        run: |
          git submodule sync --recursive
          git -c protocol.version=2 submodule update --init --force --depth 1 --recursive --jobs 8
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            Write-Host "Submodule missing; cloning googletest shallowly..."
            if (Test-Path "$env:GITHUB_WORKSPACE\googletest") {
              Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE\googletest"
            }
            git clone --depth 1 https://github.com/google/googletest.git "$env:GITHUB_WORKSPACE\googletest"
          }
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            Write-Error "googletest is still missing; aborting."
          }

      - name: Install MSYS2 toolchain
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      - name: Configure (Ninja, export compile_commands.json)
        run: >
          cmake -S . -B "${BUILD_DIR}" -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DSQLITECPP_BUILD_TESTS=ON
          -DSQLITECPP_BUILD_EXAMPLES=ON

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release -j2

      - name: Test
        run: ctest --output-on-failure -C Release --test-dir "${BUILD_DIR}"

      # SonarCloud scan using compile_commands.json (no wrapper)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --define sonar.sources=.
            --define sonar.exclusions=**/googletest/**,**/.scannerwork/**,**/${{ env.BUILD_DIR }}/**
            --define sonar.cfamily.compile-commands=${{ env.BUILD_DIR }}/compile_commands.json
            --define sonar.verbose=true
