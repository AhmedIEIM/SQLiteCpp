name: Main Workflow

on:
  push:
    branches: [ main, master, develop, 'releases/**' ]
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write

jobs:
  sonarqube:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}   # cmake/ninja come from /mingw64/bin

    env:
      BW_DIR: bw-out
      BUILD_DIR: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive   # REQUIRED: pulls googletest submodule

      # Double-check submodule presence (fail early if missing)
      - name: Verify googletest submodule
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            git submodule sync --recursive
            git submodule update --init --recursive
          }
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\googletest\CMakeLists.txt")) {
            Write-Error "googletest submodule is missing (required when SQLITECPP_BUILD_TESTS=ON)."
          }

      - name: Install MSYS2 toolchain
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      - name: Install Build Wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v6

      - name: CMake configure (Ninja)
        run: >
          cmake -S . -B "${BUILD_DIR}" -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DSQLITECPP_BUILD_TESTS=ON
          -DSQLITECPP_BUILD_EXAMPLES=ON

      - name: CMake build (wrapped)
        shell: pwsh
        run: |
          $ws = "${{ github.workspace }}" -replace '\\','/'
          $build = "cmake --build `"$ws/${{ env.BUILD_DIR }}`" --config Release -j2"
          build-wrapper-win-x86-64.exe --out-dir $env:BW_DIR msys2 -c "$build"

      - name: CTest (run unit tests)
        run: ctest --output-on-failure -C Release --test-dir "${BUILD_DIR}"

      - name: Show compile_commands.json
        shell: pwsh
        run: |
          Get-Item "$env:BW_DIR\compile_commands.json"
          Get-Content "$env:BW_DIR\compile_commands.json" -TotalCount 20

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            --define sonar.sources=.
            --define sonar.exclusions=**/googletest/**,**/.scannerwork/**,**/${{ env.BUILD_DIR }}/**
            --define sonar.cfamily.compile-commands=${{ env.BW_DIR }}/compile_commands.json
            --define sonar.verbose=true
